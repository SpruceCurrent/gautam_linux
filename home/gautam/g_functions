settitle ()
{
    # This function is used to change the title of the current xterm window.
    # The terminal's title also depends upon the PS1 prompt, but I don't quite
    # know how.

    local title="$1";
    if [ -z $title ]
    then
        echo "Enter a title for this terminal window: ";
        read title;
    fi

    echo -ne "\033]0;$title\007"

    # ESC]0;stringBEL -- Set icon name and window title to string
    # ESC]1;stringBEL -- Set icon name to string
    # ESC]2;stringBEL -- Set window title to string

    # where ESC is the escape character (\033),
    # and BEL is the bell character (\007).
    # (source: http://tldp.org/HOWTO/Xterm-Title-3.html)
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xvjf $1 ;; #&& cd $(basename "$1" .tar.bz2) ;;
            *.tar.gz)   tar xvzf $1 ;; #&& cd $(basename "$1" .tar.gz) ;;
            *.tar.xz)   tar Jxvf $1 ;; #&& cd $(basename "$1" .tar.xz) ;;
            *.bz2)      bunzip2 $1 ;; #&& cd $(basename "$1" /bz2) ;;
            *.rar)      unrar x $1 ;; #&& cd $(basename "$1" .rar) ;;
            *.gz)       gunzip $1 ;; #&& cd $(basename "$1" .gz) ;;
            *.tar)      tar xvf $1 ;; #&& cd $(basename "$1" .tar) ;;
            *.tbz2)     tar xvjf $1 ;; #&& cd $(basename "$1" .tbz2) ;;
            *.tgz)      tar xvzf $1 ;; #&& cd $(basename "$1" .tgz) ;;
            *.zip)      unzip $1 ;; #&& cd $(basename "$1" .zip) ;;
            *.Z)        uncompress $1 ;; #&& cd $(basename "$1" .Z) ;;
            *.7z)       7z x $1 ;; #&& cd $(basename "$1" .7z) ;;
            *)          echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


gh ()
{
    grep $1 *
}

ghh ()
{
    grep $1 *h
}

ghc ()
{
    grep $1 *c
}


gr ()
{
    grep -rs $1 .
    # -s => suppress error messages
}

finddef ()
{
    # Set the base to BASE as defined in ~/.googie_variables
    set finding_base = $BASE

    # Confirm whether this should be used as the base
    echo -n "Use base as '$finding_base'? (y/n) "
    read yes_or_no
    if [ $yes_or_no != "y" ] && \
       [ $yes_or_no != "Y" ] && \
       [ $yes_or_no != "" ]; then
        echo "Set base to: "
        read finding_base
    fi

    # Path 1
    echo "Looking in '$finding_base/video/src'..."
    cd $finding_base/video/src
    grep -rws $1 . | cut -d":" -f1 | uniq | grep 'h$'

    echo -n "Continue looking? "
    read yes_or_no
    if [ $yes_or_no != "y" ] && [ $yes_or_no != "Y" ]; then
        return
    fi

    # Path 2
    echo "Looking in '$finding_base/linux/src'..."
    cd $finding_base/linux/src
    grep -rws $1 . | cut -d":" -f1 | uniq | grep 'h$'

    echo -n "Continue looking? "
    read yes_or_no
    if [ $yes_or_no != "y" ] && [ $yes_or_no != "Y" ]; then
        return
    fi

    # Path 3
    echo "Looking in '/benuvobs/porting_static/mot-cmts-ipr/OS'..."
    cd /benuvobs/porting_static/mot-cmts-ipr/OS
    grep -rws $1 . | cut -d":" -f1 | uniq | grep 'h$'

    echo -n "Continue looking? "
    read yes_or_no
    if [ $yes_or_no != "y" ] && [ $yes_or_no != "Y" ]; then
        return
    fi

    # Path 4
    echo "Looking in '/benuvobs/motipr_static/vobs'..."
    cd /benuvobs/motipr_static/vobs
    grep -rws $1 . | cut -d":" -f1 | uniq | grep 'h$'
}

ff ()
{
    find $PWD -name $1
}

grep_using_helper ()
{
    # The list of files to grep in should be present in '/tmp/gautam_helper.txt'
    for file in `cat /tmp/gautam_helper.txt`; do echo "$file"; grep -w $1 $file; read dummy; echo ""; done
}

grep_include ()
{
    # look for lines matching include statements (e.g. #include "dgmMain.h")
    # in this case, give only 'dgmMain' as the input to the function.
    grep -rl --include=*\.[ch] "include\s*.$1\.h." .
}

create_backup()
{
    if [ -d /tmp/backupDir ]
    then
        echo "/tmp/backupDir exists... aborting."
        return
    fi

    mkdir /tmp/backupDir

    virtualMachineSrcDir=/home/gautam/work/helper_files/virtualMachineFiles
    virtualMachineDestDir=/tmp/backupDir/virtualMachineFiles

    # Environment related files
    cp ~/.bashrc                       /tmp/backupDir/dot_bashrc
    cp ~/.googie_variables             /tmp/backupDir/dot_googie_variables
    cp ~/.googie_aliases               /tmp/backupDir/dot_googie_aliases
    cp ~/.googie_functions             /tmp/backupDir/dot_googie_functions
    cp ~/.gitconfig                    /tmp/backupDir/dot_gitconfig

    # Vim related files
    cp ~/.vimrc                        /tmp/backupDir/dot_vimrc
    mkdir -p /tmp/backupDir/dot_vim/colors
    cp ~/.vim/colors/colortest.c       /tmp/backupDir/dot_vim/colors/colortest.c
    cp ~/.vim/colors/googie_colors.vim /tmp/backupDir/dot_vim/colors/googie_colors.vim
    cp ~/.vim/colors/navajo.vim        /tmp/backupDir/dot_vim/colors/navajo.vim

    # Xmonad related files
    cp ~/.xmobarrc                     /tmp/backupDir/dot_xmobarrc
    mkdir /tmp/backupDir/dot_xmonad
    cp ~/.xmonad/xmonad.hs             /tmp/backupDir/dot_xmonad/xmonad.hs

    # Work related files (General)
    cp ~/notes.txt /tmp/backupDir/notes.txt

    # Work related files (Benu)
    mkdir -p /tmp/backupDir/benu
    cp ~/work/helper_files/benu_notes.txt        /tmp/backupDir/benu/benu_notes.txt
    cp ~/work/helper_files/local_build_notes.txt /tmp/backupDir/benu/local_build_notes.txt
    cp ~/work/helper_files/long_commands.txt     /tmp/backupDir/benu/long_commands.txt

    # Work related files (virtual machine)
    mkdir -p $virtualMachineDestDir
    cp $virtualMachineSrcDir/* $virtualMachineDestDir

    # Miscellaneous files
    cp ~/.svn_diff_using_meld /tmp/backupDir/dot_svn_diff_using_meld
    cp ~/.reminders           /tmp/backupDir/dot_reminders

    cd /tmp
    tar -zcf linux_essential_backup.tar.gz backupDir
    cd - >/dev/null

    echo "Files backed up in '/tmp/linux_essential_backup.tar.gz'"
}

svnbranch()
{
    if [ $1 ]; then
        export BASE=/home/gautam/work/baseSvn/$1
        sed -i s/BRANCH=.*$/BRANCH=$1/ ~/.googie_variables
    fi

    echo "BASE: $BASE"
}

svnbranch_old()
{
    # Note: video portions of this function have been commented out since there's no VSP project
    # currently

    # If there is no input argument, then just display the current links and exit
    if [ -z $1 ]; then
        echo "    linux -> `ls -l $BASESVN/linux | awk '{print $NF}'`"
        echo "    wireless -> `ls -l $BASESVN/wireless | awk '{print $NF}'`"
#       echo "    video -> `ls -l $BASESVN/video | awk '{print $NF}'`"
        return
    fi

    # Set the directory variables, assuming that the branch name was the input argument
    LINUXDIR="$BASESVN/$1/linux"
    WIRELESSDIR="$BASESVN/$1/wireless"
#   VIDEODIR="$BASESVN/$1/video"

    # Check if the corresponding 'linux' directory exists
    if ! [ -d $LINUXDIR ]; then
        echo "Corresponding 'linux' directory ($LINUXDIR) doesn't exist."
        echo -n "Use trunk for 'linux' ($BASESVN/trunk/linux) instead? (y/n): "
        read yesOrNo
        if [ -z $yesOrNo ] || [ $yesOrNo != "y" ] && [ $yesOrNo != "Y" ]; then
            echo "No symbolic links created/modified."
            return
        fi
        LINUXDIR="$BASESVN/trunk/linux"
    fi

    # Check if the corresponding 'wireless' directory exists
    if ! [ -d $WIRELESSDIR ]; then
        echo "Corresponding 'wireless' directory ($WIRELESSDIR) doesn't exist."
        echo -n "Use trunk for 'wireless' ($BASESVN/trunk/wireless) instead? (y/n): "
        read yesOrNo
        if [ -z $yesOrNo ] || [ $yesOrNo != "y" ] && [ $yesOrNo != "Y" ]; then
            echo "No symbolic links created/modified."
            return
        fi
        WIRELESSDIR="$BASESVN/trunk/wireless"
    fi

#   # Check if the corresponding 'video' directory exists
#   if ! [ -d $VIDEODIR ]; then
#       echo "Corresponding 'video' directory ($VIDEODIR) doesn't exist."
#       echo "No symbolic links created/modified."
#       return
#   fi

    # Remove existing links
    rm -f $BASESVN/linux
    rm -f $BASESVN/wireless
#   rm -f $BASESVN/video

    # Create new links
    ln -s $LINUXDIR $BASESVN/linux
    ln -s $WIRELESSDIR $BASESVN/wireless
#   ln -s $VIDEODIR $BASESVN/video

    echo "symbolic links created as follows:"
    echo "    linux -> $LINUXDIR"
    echo "    wireless -> $WIRELESSDIR"
#   echo "    video -> $VIDEODIR"
}

svnp()
{
    if [ $# -eq 0 ]
    then
        svn info . | grep URL | cut -d" " -f2
    else
        until [ -z $1 ]
        do
            svn info $1 | grep URL | cut -d" " -f2
            shift
        done
    fi
}

dp()
{
    # Shows diff between given revision of given file with the previous revision.

    # Usage:
    #    $ dp revision fileName1, fileName2, ...
    #        OR
    #    $ dp revision

    curRevision="$1"
    prevRevision=`expr $1 - 1`

    # Get rid of the revision number
    shift

    if [ -z $1 ]; then
        echo "Retrieving list of files modified in revision '$curRevision'..."
        svn diff -r $prevRevision:$curRevision --summarize 2>&1
        if [ $? != "0" ]; then
            echo "Incorrect directory"
            return
        fi

        echo -n "Enter file to compare ('q' to quit): "
        read filename

        while [ $filename != "q" ]
        do
            # Check if the file exists
            ls $filename > /dev/null 2>&1
            if [ $? != "0" ]; then
                echo "cannot access '$filename': No such file or directory"
            else
                # Check if the file is part of the repository
                svn info $filename > /dev/null 2>&1
                if [ $? != "0" ]; then
                    echo "'$filename': Not a versioned resource"
                else
                    fullFilePath=`svnp $filename`
                    sd $fullFilePath@$prevRevision $fullFilePath@$curRevision
                fi
            fi
            echo -n "Enter file to compare ('q' to quit): "
            read filename
        done
    else
        until [ -z $1 ]
        do
            # Check if the file exists
            ls $1 > /dev/null 2>&1
            if [ $? != "0" ]; then
                echo "cannot access '$1': No such file or directory"
            else
                # Check if the file is part of the repository
                svn info $1 > /dev/null 2>&1
                if [ $? != "0" ]; then
                    echo "'$1': Not a versioned resource"
                else
                    # Check if the file was modified in the given revision
                    svn log -v -r $curRevision | grep $1 > /dev/null 2>&1
                    if [ $? != "0" ]; then
                        echo "'$1' was not modified in revision '$curRevision'"
                    else
                        fullFilePath=`svnp $1`
                        sd $fullFilePath@$prevRevision $fullFilePath@$curRevision
                    fi
                fi
            fi

            # Get the next file name
            shift
        done
    fi
}

createBranch()
{
    # TODO
    # Actually trying to execute the 'svn copy' command from the script results in:
    #    svn: Local, non-commit operations do not take a log message or revision properties
    # Hence, for now only the commands to be executed are displayed.
    # (this doesn't need additional confirmation)

    BRANCH_NAME=$1

#   echo -n "This will create branch '$BRANCH_NAME' in both platform & wireless vobs. Proceed? (y/n): "
#   read yes_or_no
#   if [ $yes_or_no != "y" ] && [ $yes_or_no != "Y" ]; then
#       echo "Aborted."
#       return
#   fi

    # '#' for left strip, '%' for right strip
    BUG_NUM=${BRANCH_NAME#*gautam_mhn_}
    COMMIT_MSG="\"Branch of changes related to fixing JIRA bug MHN-$BUG_NUM\""

    echo "Run the following commands:"

#   echo "Creating branch in platform vob..."
    FROM_URL=svn+ssh://192.168.2.254/benuvobs/platform/branches/trunk_demo_base_2.0
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/platform/branches/$BRANCH_NAME
    CMD="svn copy $FROM_URL $BRANCH_URL -m $COMMIT_MSG"
    echo "$CMD"
#   $CMD

#   echo "Creating branch in wireless vob..."
    FROM_URL=svn+ssh://192.168.2.254/benuvobs/wireless/branches/trunk_demo_base_2.0
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/wireless/branches/$BRANCH_NAME
    CMD="svn copy $FROM_URL $BRANCH_URL -m $COMMIT_MSG"
    echo "$CMD"
#   $CMD
}

svnReviewBranch()
{
    BRANCH_NAME=$1

    if [ "$2" = "--cmds-only" ] || [ "$2" = "-c" ]; then
        DO_DIFF="0"
    else
        DO_DIFF="1"
    fi

    echo "Checking platform vob..."
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/platform/branches/$BRANCH_NAME/linux
    START_VER=`svn log $BRANCH_URL --stop-on-copy 2>/dev/null | \grep "^r" | tail -1 | cut -d" " -f1`
    if [ -z $START_VER ]; then
        echo "    << Branch '$BRANCH_NAME' not found in platform vob >>"
    else
        CMD="svn diff -$START_VER:HEAD --diff-cmd kdiff3 $BRANCH_URL"
        echo "    $CMD"
        if [ $DO_DIFF = "1" ]; then
            $CMD > /dev/null 2>&1
        fi
    fi

    echo "Checking wireless vob..."
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/wireless/branches/$BRANCH_NAME/wireless
    START_VER=`svn log $BRANCH_URL --stop-on-copy 2>/dev/null | \grep "^r" | tail -1 | cut -d" " -f1`
    if [ -z $START_VER ]; then
        echo "    << Branch '$BRANCH_NAME' not found in wireless vob >>"
    else
        CMD="svn diff -$START_VER:HEAD --diff-cmd kdiff3 $BRANCH_URL"
        echo "    $CMD"
        if [ $DO_DIFF = "1" ]; then
            $CMD > /dev/null 2>&1
        fi
    fi
}

filesInBranch()
{
    BRANCH_NAME=$1

    echo "Checking platform vob..."
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/platform/branches/$BRANCH_NAME/linux
    START_VER=`svn log $BRANCH_URL --stop-on-copy 2>/dev/null | \grep "^r" | tail -1 | cut -d" " -f1`
    if [ -z $START_VER ]; then
        echo "    << Branch '$BRANCH_NAME' not found in platform vob >>"
    else
        CMD="svn diff -$START_VER:HEAD --summarize $BRANCH_URL"
        echo "    $CMD"
        $CMD
    fi

    echo "Checking wireless vob..."
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/wireless/branches/$BRANCH_NAME/wireless
    START_VER=`svn log $BRANCH_URL --stop-on-copy 2>/dev/null | \grep "^r" | tail -1 | cut -d" " -f1`
    if [ -z $START_VER ]; then
        echo "    << Branch '$BRANCH_NAME' not found in wireless vob >>"
    else
        CMD="svn diff -$START_VER:HEAD --summarize $BRANCH_URL"
        echo "    $CMD"
        $CMD
    fi
}

mergeBranch()
{
    BRANCH_NAME=$1

    echo -n "This will merge branch '$BRANCH_NAME' to '$BASE'. Proceed? (y/n): "
    read yes_or_no
    if [ $yes_or_no != "y" ] && [ $yes_or_no != "Y" ]; then
        echo "Aborted."
        return
    fi

    if [ "$2" = "-a" ]; then
        ACTUALLY_MERGE="1"
    else
        ACTUALLY_MERGE="0"
    fi

    # Go to base
    b

    echo "Checking platform vob..."
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/platform/branches/$BRANCH_NAME/linux
    START_VER=`svn log $BRANCH_URL --stop-on-copy 2>/dev/null | \grep "^r" | tail -1 | cut -d" " -f1`
    if [ -z $START_VER ]; then
        echo "    << Branch '$BRANCH_NAME' not found in platform vob >>"
    else
        if [ $ACTUALLY_MERGE = "1" ]; then
            CMD="svn merge -$START_VER:HEAD $BRANCH_URL --non-interactive"
        else
            CMD="svn merge -$START_VER:HEAD $BRANCH_URL --non-interactive --dry-run"
        fi
        cd linux
        echo "    $CMD"
        $CMD
    fi

    # Go to base
    b

    echo "Checking wireless vob..."
    BRANCH_URL=svn+ssh://192.168.2.254/benuvobs/wireless/branches/$BRANCH_NAME/wireless
    START_VER=`svn log $BRANCH_URL --stop-on-copy 2>/dev/null | \grep "^r" | tail -1 | cut -d" " -f1`
    if [ -z $START_VER ]; then
        echo "    << Branch '$BRANCH_NAME' not found in wireless vob >>"
    else
        if [ $ACTUALLY_MERGE = "1" ]; then
            CMD="svn merge -$START_VER:HEAD $BRANCH_URL --non-interactive"
        else
            CMD="svn merge -$START_VER:HEAD $BRANCH_URL --non-interactive --dry-run"
        fi
        cd wireless
        echo "    $CMD"
        $CMD
    fi

    # Go to base
    b
}

switchTo()
{
    svn switch svn+ssh://192.168.2.254/benuvobs/platform/branches/$1/linux linux

    svn switch svn+ssh://192.168.2.254/benuvobs/wireless/branches/$1/wireless wireless

    alert "Switch Complete"
}

check_files()
{
    # check for tabs
    # check for trailing spaces
    # check for lines longer than 100 characters
    # check for multiple blank lines (or lines containing just whitespace)
    read dummy
}

tun()
{
#   pgrep -x vpnc >/dev/null
    ping -i 0.2 -c 4 -w 2 -q 192.168.2.254 > /dev/null 2>&1
        # -i n => set sending interval to n second(s)
        # -c n => send only n packet(s)
        # -w n => wait for at most n second(s) for a reply
        # -q   => quiet mode (show only summary)
    if [ $? = "0" ]; then
        echo "Tunnel enabled"
    else
        echo "Tunnel not enabled"
    fi
}

dns_servers()
{
    # to list DNS servers associated with all interfaces, use:
    #    $> dns_server
    # to list DNS servers associated with a specific interface, use:
    #    $> dns_server eth0

    # There's a segmentation fault observed with 'eth0' with NetworkManager 0.9.8.0
    # should be fixed in NetworkManager 0.9.8.4
    # use 'NetworkManager --version' to check version

    if [ -z $1 ]; then
        for interface in `ip link show | sed -n 's/^.*:\s\(.*\):.*$/\1/p'`
        do
            echo "$interface:"
            nmcli dev list iface $interface > /dev/null 2>&1
            if [ $? = "0" ]; then
                nmcli dev list iface $interface | grep DNS | awk '{print "    " $NF}'
            else
                echo "    <None>"
            fi
            echo ""
        done
    else
        interface=$1
        echo "$interface:"
        nmcli dev list iface $interface > /dev/null 2>&1
        if [ $? = "0" ]; then
            nmcli dev list iface $interface | grep DNS | awk '{print "    " $NF}'
        else
            echo "    <None>"
        fi
    fi
}

dec()
{
    if [[ $1 == 0x* ]]; then
        printf "%d\n" $1
    else
        printf "%d\n" 0x$1
    fi
}

hex()
{
    printf "0x%X\n" $1
}

# To start a countdown timer of 30 seconds, use:
#     $> countdown 30
# For 2 hours, use:
#     $> countdown $((2*60*60))
# Alternatively, the short format notation can be used, like so:
#     $> countdown 30m
# (the short format notation is only supported for minutes currently)
# Entering a custom message after the time pops up a notification
countdown()
{
    STR=$1

    # Extract the last character of the input to determine if the short format
    # notation was used
    TMP=$((${#STR}-1))
    LAST_CHAR=${STR:$TMP:1}

    case $LAST_CHAR in
        ''|*[!0-9]*)
            # The last character is not a digit. Assume short format notation.
            if [ $LAST_CHAR != "m" ]
            then
                echo "Short format notation supported only for minutes currently"
                return
            fi
            # Get rid of the last character
            MINUTES=${STR:0:$i}
            SECONDS=$((MINUTES*60))
            ;;
        *) SECONDS=$STR ;;
    esac

    date1=$((`date +%s` + $SECONDS));

    while [ "$date1" -ne `date +%s` ]
    do 
        echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
        sleep 0.1
    done

    echo "00:00:00"

    if [ $# -eq 1 ]
    then
        alert "Countdown complete!!"
    else
        xmessage "$2"
    fi
}

stopwatch()
{
    date1=`date +%s`; 

    while true
    do 
        echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
        sleep 0.1
    done
}

show_line()
{
    LINE_NUM="$1"
    FILE="$2"

    if [ "$LINE_NUM" -le 0 ]
    then
        echo "Invalid line number '$LINE_NUM'"
        return
    fi

    SED_CMD="$LINE_NUM"p

    sed -n $SED_CMD $FILE
}

del_line()
{
    if [ $# -eq 0 ]
    then
        echo "Usage: del_line <line_num> <file>"
        return
    fi

    LINE_NUM="$1"
    FILE="$2"

    if [ "$LINE_NUM" -le 0 ]
    then
        echo "Invalid line number '$LINE_NUM'"
        return
    fi

    SED_CMD="$LINE_NUM"d

    LINE_TO_DELETE=$(show_line $LINE_NUM $FILE)

    sed -i $SED_CMD $FILE

    echo "Deleted line:"
    echo $LINE_TO_DELETE
}

# Notes:
# The current value of IFS (Internal Field Separator) may be viewed using the following pipeline:
#
# $> echo "$IFS" | od -b
# 0000000 040 011 012 012
# 0000004
# $>
#
# The output of the echo command is piped into the octal dump command, giving you its octal
# equivalent. You can then use an ASCII table to determine what characters are stored in the
# variable.
# Hint: Ignore the first set of zeros and the second newline character (012), which was generated by
# echo.
# (source: http://www.livefirelabs.com/unix_tip_trick_shell_script/oct_2003/10132003.htm)


